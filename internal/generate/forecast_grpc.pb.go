// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: grpc/v1/forecast.proto

package generate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ForecastService_GetForcast_FullMethodName     = "/grpc.v1.ForecastService/GetForcast"
	ForecastService_GetForcasts_FullMethodName    = "/grpc.v1.ForecastService/GetForcasts"
	ForecastService_GetAllForcasts_FullMethodName = "/grpc.v1.ForecastService/GetAllForcasts"
)

// ForecastServiceClient is the client API for ForecastService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForecastServiceClient interface {
	GetForcast(ctx context.Context, in *ForecastIDQuery, opts ...grpc.CallOption) (*Forecast, error)
	GetForcasts(ctx context.Context, in *ForecastQuery, opts ...grpc.CallOption) (*Forecasts, error)
	GetAllForcasts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Forecasts, error)
}

type forecastServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForecastServiceClient(cc grpc.ClientConnInterface) ForecastServiceClient {
	return &forecastServiceClient{cc}
}

func (c *forecastServiceClient) GetForcast(ctx context.Context, in *ForecastIDQuery, opts ...grpc.CallOption) (*Forecast, error) {
	out := new(Forecast)
	err := c.cc.Invoke(ctx, ForecastService_GetForcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastServiceClient) GetForcasts(ctx context.Context, in *ForecastQuery, opts ...grpc.CallOption) (*Forecasts, error) {
	out := new(Forecasts)
	err := c.cc.Invoke(ctx, ForecastService_GetForcasts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastServiceClient) GetAllForcasts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Forecasts, error) {
	out := new(Forecasts)
	err := c.cc.Invoke(ctx, ForecastService_GetAllForcasts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForecastServiceServer is the server API for ForecastService service.
// All implementations must embed UnimplementedForecastServiceServer
// for forward compatibility
type ForecastServiceServer interface {
	GetForcast(context.Context, *ForecastIDQuery) (*Forecast, error)
	GetForcasts(context.Context, *ForecastQuery) (*Forecasts, error)
	GetAllForcasts(context.Context, *emptypb.Empty) (*Forecasts, error)
	mustEmbedUnimplementedForecastServiceServer()
}

// UnimplementedForecastServiceServer must be embedded to have forward compatible implementations.
type UnimplementedForecastServiceServer struct {
}

func (UnimplementedForecastServiceServer) GetForcast(context.Context, *ForecastIDQuery) (*Forecast, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForcast not implemented")
}
func (UnimplementedForecastServiceServer) GetForcasts(context.Context, *ForecastQuery) (*Forecasts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForcasts not implemented")
}
func (UnimplementedForecastServiceServer) GetAllForcasts(context.Context, *emptypb.Empty) (*Forecasts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllForcasts not implemented")
}
func (UnimplementedForecastServiceServer) mustEmbedUnimplementedForecastServiceServer() {}

// UnsafeForecastServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForecastServiceServer will
// result in compilation errors.
type UnsafeForecastServiceServer interface {
	mustEmbedUnimplementedForecastServiceServer()
}

func RegisterForecastServiceServer(s grpc.ServiceRegistrar, srv ForecastServiceServer) {
	s.RegisterService(&ForecastService_ServiceDesc, srv)
}

func _ForecastService_GetForcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForecastIDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServiceServer).GetForcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastService_GetForcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServiceServer).GetForcast(ctx, req.(*ForecastIDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastService_GetForcasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForecastQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServiceServer).GetForcasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastService_GetForcasts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServiceServer).GetForcasts(ctx, req.(*ForecastQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastService_GetAllForcasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServiceServer).GetAllForcasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForecastService_GetAllForcasts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServiceServer).GetAllForcasts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ForecastService_ServiceDesc is the grpc.ServiceDesc for ForecastService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForecastService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.v1.ForecastService",
	HandlerType: (*ForecastServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetForcast",
			Handler:    _ForecastService_GetForcast_Handler,
		},
		{
			MethodName: "GetForcasts",
			Handler:    _ForecastService_GetForcasts_Handler,
		},
		{
			MethodName: "GetAllForcasts",
			Handler:    _ForecastService_GetAllForcasts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/v1/forecast.proto",
}
