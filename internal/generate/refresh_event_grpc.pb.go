// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: grpc/v1/refresh_event.proto

package generate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RefreshResponseService_GetLastRefresh_FullMethodName = "/grpc.v1.RefreshResponseService/GetLastRefresh"
)

// RefreshResponseServiceClient is the client API for RefreshResponseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefreshResponseServiceClient interface {
	GetLastRefresh(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RefreshResponse, error)
}

type refreshResponseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRefreshResponseServiceClient(cc grpc.ClientConnInterface) RefreshResponseServiceClient {
	return &refreshResponseServiceClient{cc}
}

func (c *refreshResponseServiceClient) GetLastRefresh(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, RefreshResponseService_GetLastRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefreshResponseServiceServer is the server API for RefreshResponseService service.
// All implementations must embed UnimplementedRefreshResponseServiceServer
// for forward compatibility
type RefreshResponseServiceServer interface {
	GetLastRefresh(context.Context, *emptypb.Empty) (*RefreshResponse, error)
	mustEmbedUnimplementedRefreshResponseServiceServer()
}

// UnimplementedRefreshResponseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRefreshResponseServiceServer struct {
}

func (UnimplementedRefreshResponseServiceServer) GetLastRefresh(context.Context, *emptypb.Empty) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastRefresh not implemented")
}
func (UnimplementedRefreshResponseServiceServer) mustEmbedUnimplementedRefreshResponseServiceServer() {
}

// UnsafeRefreshResponseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefreshResponseServiceServer will
// result in compilation errors.
type UnsafeRefreshResponseServiceServer interface {
	mustEmbedUnimplementedRefreshResponseServiceServer()
}

func RegisterRefreshResponseServiceServer(s grpc.ServiceRegistrar, srv RefreshResponseServiceServer) {
	s.RegisterService(&RefreshResponseService_ServiceDesc, srv)
}

func _RefreshResponseService_GetLastRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefreshResponseServiceServer).GetLastRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefreshResponseService_GetLastRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefreshResponseServiceServer).GetLastRefresh(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RefreshResponseService_ServiceDesc is the grpc.ServiceDesc for RefreshResponseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RefreshResponseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.v1.RefreshResponseService",
	HandlerType: (*RefreshResponseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastRefresh",
			Handler:    _RefreshResponseService_GetLastRefresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/v1/refresh_event.proto",
}
